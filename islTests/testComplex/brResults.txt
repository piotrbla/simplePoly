[N] -> { S1[0, i1, 0, i3, 0, i5] -> S1[0, o1, 0, o3, 0, o5] : 16i1 = -1 + N and 16o1 = -1 + N and i5 >= 0 and o3 > i3 and 16o3 <= -17 + N and o5 >= i3 and i5 < o5 <= 1 + i3; S1[0, i1, 0, i3, 0, i5] -> S1[0, o1, 0, o3, 0, o5 = i3] : -16 + N <= 16i1 <= -2 + N and 0 <= i5 <= i3 and -16 + N <= 16o1 <= -2 + N and o3 > i3 and 16o3 <= -2 + N; S1[0, i1, 0, i3, i4, i5 = 0] -> S1[0, o1, 0, o3, 1, o5 = 0] : 16i1 >= -16 + N and i3 >= 0 and i4 >= 0 and 2 - N + 16i1 <= i4 <= 1 and -16 + N <= 16o1 <= -2 + N and o3 >= i3 + i4 and 16o3 <= -3 + N; S1[0, i1, 0, i3, 0, i5] -> S1[0, o1, 0, o3, 1, o5 = 0] : -16 + N <= 16i1 <= -2 + N and 0 < i5 <= i3 and -16 + N <= 16o1 <= -2 + N and o3 >= i3 and 16o3 <= -3 + N; S1[0, i1, 0, i3, 0, i5] -> S1[0, o1, 0, o3 = i3, 0, o5] : -16 + N <= 16i1 <= -2 + N and 16i3 <= -2 + N and i5 >= 0 and -16 + N <= 16o1 <= -2 + N and i5 < o5 <= i3; S1[0, i1, 0, i3, 0, i5] -> S1[0, o1, 0, o3 = i3, 0, o5] : 16o1 = -1 + N and 16i1 = -1 + N and 16i3 <= -17 + N and i5 >= 0 and i5 < o5 <= i3; S1[0, i1, 0, i3, 1, i5 = 0] -> S1[0, o1, 0, o3, 0, o5] : -16 + N <= 16i1 < N and i3 >= 0 and -16 + N <= 16o1 <= -2 + N and o3 > i3 and 16o3 <= -2 + N and i3 <= o5 <= 1 + i3; S1[0, i1, 0, i3, 1, i5 = 0] -> S1[0, o1, 0, o3, 0, o5] : 16i1 = -1 + N and 16o1 = -1 + N and i3 >= 0 and o3 > i3 and 16o3 <= -17 + N and i3 <= o5 <= 1 + i3; S1[0, i1, 0, i3, 0, i5 = i3] -> S1[0, o1, 0, o3, 0, o5 = i3] : 16o1 = -1 + N and 16i1 = -1 + N and i3 >= 0 and o3 > i3 and 16o3 <= -17 + N; S1[0, i1, 0, i3, 0, i5] -> S1[0, o1, 0, o3 = i3, 1, o5 = 0] : -16 + N <= 16i1 <= -2 + N and 16i3 <= -3 + N and 0 <= i5 <= i3 and -16 + N <= 16o1 < N; S1[0, i1, 0, i3, 0, i5] -> S1[0, o1, 0, o3 = i3, 1, o5 = 0] : 16i1 = -1 + N and 16o1 = -1 + N and 16i3 <= -17 + N and 0 <= i5 <= i3; S1[0, i1, 0, i3, 0, i5] -> S2[0, o1, 0, o3 = i3, 1, o5 = 0] : -16 + N <= 16i1 <= -2 + N and 16i3 <= -2 + N and 0 <= i5 <= i3 and -16 + N <= 16o1 < N; S1[0, i1, 0, i3, 0, i5] -> S2[0, o1, 0, o3 = i3, 1, o5 = 0] : 16i1 = -1 + N and 16o1 = -1 + N and 16i3 <= -17 + N and 0 <= i5 <= i3; S2[0, i1, 0, i3, 1, i5 = 0] -> S1[0, o1, 0, o3, 0, o5] : -16 + N <= 16i1 < N and i3 >= 0 and -16 + N <= 16o1 <= -2 + N and o3 > i3 and 16o3 <= -2 + N and i3 <= o5 <= 1 + i3; S2[0, i1, 0, i3, 1, i5 = 0] -> S1[0, o1, 0, o3, 0, o5] : 16i1 = -1 + N and 16o1 = -1 + N and i3 >= 0 and o3 > i3 and 16o3 <= -17 + N and i3 <= o5 <= 1 + i3; S2[0, i1, 0, i3, 1, i5 = 0] -> S1[0, o1, 0, o3, 1, o5 = 0] : -16 + N <= 16i1 < N and i3 >= 0 and -16 + N <= 16o1 <= -2 + N and o3 > i3 and 16o3 <= -3 + N }
[N] -> { S2[0, i1, 0, i3, 1, i5 = 0] : i3 >= 0 and 16i3 <= -2 + N and ((-16 + N <= 16i1 < N and 16i3 <= -19 + N and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 < N and 16i3 <= -18 + N and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 < N and 16*floor((-1 + N)/16) <= -2 + N) or (16i1 = -1 + N and 16i3 <= -33 + N) or (16i1 = -1 + N and 16i3 <= -17 + N)); S1[0, i1, 0, i3, i4, i5 = 0] : 16i1 >= -16 + N and i3 >= 0 and i4 >= 0 and 2 - N + 16i1 <= i4 <= 1 and 16i4 <= -3 + N - 16i3 and 16*floor((-1 + N)/16) <= -2 + N; S1[0, i1, 0, i3, 0, i5] : 16i3 <= -2 + N and 0 <= i5 <= i3 and ((-16 + N <= 16i1 <= -2 + N and 16i3 <= -3 + N) or (-16 + N <= 16i1 <= -2 + N) or (-16 + N <= 16i1 <= -2 + N and i3 > 0) or (-16 + N <= 16i1 <= -2 + N and 16i3 <= -18 + N and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 <= -2 + N and 16i3 <= -3 + N and i5 > 0 and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 <= -2 + N and i5 > 0 and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 <= -2 + N and i5 < i3 and 16*floor((-1 + N)/16) <= -2 + N) or (16i1 = -1 + N and 16i3 <= -33 + N) or (16i1 = -1 + N and 16i3 <= -17 + N and i5 > 0) or (16i1 = -1 + N and 16i3 <= -17 + N and i5 < i3) or (16i1 = -1 + N and 16i3 <= -17 + N) or (16i1 = -1 + N and i3 > 0 and 16i3 <= -17 + N)); S1[0, i1, 0, i3, 1, i5 = 0] : i3 >= 0 and 16i3 <= -3 + N and ((-16 + N <= 16i1 < N and 16i3 <= -18 + N and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 <= -2 + N and i3 > 0) or (-16 + N <= 16i1 <= -2 + N and i3 > 0 and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 < N and 16*floor((-1 + N)/16) <= -2 + N) or (-16 + N <= 16i1 <= -2 + N and 16*floor((-1 + N)/16) <= -2 + N + i3) or (16i1 = -1 + N and 16i3 <= -33 + N) or (16i1 = -1 + N and 16i3 <= -17 + N)); S1[0, i1, 0, i3, 0, i5 = i3] : 16i1 = -1 + N and i3 >= 0 and 16i3 <= -33 + N }
domain: "[N] -> { S2[0, i1, 0, i3, 1, i5 = 0] : i3 >= 0 and 16i3 <= -2 + N and ((-16 + N <= 16i1 <= -2 + N and 16i3 <= -19 + N) or (-16 + N <= 16i1 <= -2 + N and 16i3 <= -18 + N) or (-16 + N <= 16i1 <= -2 + N) or (16i1 = -1 + N and 16i3 <= -33 + N) or (16i1 = -1 + N and 16i3 <= -17 + N)); S1[0, i1, 0, i3, i4, i5 = 0] : -16 + N <= 16i1 <= -2 + N and i3 >= 0 and i4 >= 0 and 2 - N + 16i1 <= i4 <= 1 and 16i4 <= -3 + N - 16i3; S1[0, i1, 0, i3, 0, i5] : 16i3 <= -2 + N and 0 <= i5 <= i3 and ((-16 + N <= 16i1 <= -2 + N and 16i3 <= -3 + N) or (-16 + N <= 16i1 <= -2 + N and 16i3 <= -18 + N) or (-16 + N <= 16i1 <= -2 + N and 16i3 <= -3 + N and i5 > 0) or (-16 + N <= 16i1 <= -2 + N and i5 > 0) or (-16 + N <= 16i1 <= -2 + N and i5 < i3) or (-16 + N <= 16i1 <= -2 + N) or (-16 + N <= 16i1 <= -2 + N and i3 > 0) or (16i1 = -1 + N and 16i3 <= -33 + N) or (16i1 = -1 + N and 16i3 <= -17 + N and i5 > 0) or (16i1 = -1 + N and 16i3 <= -17 + N and i5 < i3) or (16i1 = -1 + N and 16i3 <= -17 + N) or (16i1 = -1 + N and i3 > 0 and 16i3 <= -17 + N)); S1[0, i1, 0, i3, 1, i5 = 0] : i3 >= 0 and 16i3 <= -3 + N and ((-16 + N <= 16i1 <= -2 + N and 16i3 <= -18 + N) or (-16 + N <= 16i1 <= -2 + N and i3 > 0) or (-16 + N <= 16i1 <= -2 + N) or (16i1 = -1 + N and 16i3 <= -33 + N) or (16i1 = -1 + N and 16i3 <= -17 + N)); S1[0, i1, 0, i3, 0, i5 = i3] : 16i1 = -1 + N and i3 >= 0 and 16i3 <= -33 + N }"
child:
  schedule: "[N] -> [{ S2[i0, i1, i2, i3, i4, i5] -> [(i3)]; S1[i0, i1, i2, i3, i4, i5] -> [(i3)] }, { S2[i0, i1, i2, i3, i4, i5] -> [(i3)]; S1[i0, i1, i2, i3, i4, i5] -> [(i3 + i4)] }]"
  permutable: 1
  coincident: [ 1, 1 ]
  child:
    schedule: "[N] -> [{ S2[i0, i1, i2, i3, i4, i5] -> [(1 + i1)]; S1[i0, i1, i2, i3, i4, i5] -> [(i1)] }, { S2[i0, i1, i2, i3, i4, i5] -> [(i3)]; S1[i0, i1, i2, i3, i4, i5] -> [(i5)] }]"
    permutable: 1
    coincident: [ 1, 1 ]
    child:
      sequence:
      - filter: "[N] -> { S1[i0, i1, i2, i3, i4, i5] }"
      - filter: "[N] -> { S2[i0, i1, i2, i3, i4, i5] }"

[N] -> { S2[i0, i1, i2, i3, i4, i5] -> [i3, i3, 1 + i1, i3, 1]; S1[i0, i1, i2, i3, i4, i5] -> [i3, i3 + i4, i1, i5, 0] }
for (int c0 = 0; c0 <= floord(N - 2, 16); c0 += 1)
  for (int c1 = c0; c1 <= min(N - 15 * c0 - 2, c0 + 1); c1 += 1) {
    if (((N + 15) % 16) + c1 >= c0 + 1) {
      if (16 * c0 + 2 == N && 16 * c1 + 2 == N) {
        S1(0, (N - 2) / 16, 0, (N - 2) / 16, 0, 0);
      } else {
        S1(0, (N - 1) / 16, 0, c0, -c0 + c1, 0);
      }
      if (c1 == c0)
        for (int c3 = 1; c3 <= c0; c3 += 1)
          S1(0, (N - 1) / 16, 0, c0, 0, c3);
    } else {
      for (int c3 = 0; c3 <= c0; c3 += 1)
        S1(0, (N - 1) / 16, 0, c0, 0, c3);
    }
    if (c1 == c0)
      S2(0, (N - 1) / 16, 0, c0, 1, 0);
  }
